plugins {
    id 'io.quarkus' version '3.23.0' apply false
    id 'jacoco'
}

repositories {
    mavenCentral()
}

subprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: 'java'
    apply plugin: 'jacoco'
    ext.quarkusPlatformGroupId = 'io.quarkus.platform'
    ext.quarkusPlatformArtifactId = 'quarkus-bom'
    ext.quarkusPlatformVersion = '3.23.0'
    sourceSets.main.resources.srcDir rootProject.file('config')
    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_21.toString()
        targetCompatibility = JavaVersion.VERSION_21.toString()
    }
    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
    tasks.withType(ProcessResources).configureEach {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn subprojects.test
    additionalSourceDirs.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(subprojects.sourceSets.main.output))
    executionData.from(files(subprojects.jacocoTestReport.executionData))
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

project(':libs:common') {
    apply plugin: 'java-library'
    apply plugin: 'io.quarkus'

    dependencies {
        implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:3.23.0")
        implementation 'io.quarkus:quarkus-arc'
        implementation 'org.jboss.logging:jboss-logging'
        testImplementation 'io.quarkus:quarkus-junit5'
        testImplementation 'io.rest-assured:rest-assured'
    }
}

configure([project(':services:fooservice'), project(':services:barservice')]) {
    apply plugin: 'io.quarkus'

    dependencies {
        implementation project(':libs:common')
        implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:3.23.0")
        implementation 'io.quarkus:quarkus-rest'
        implementation 'io.quarkus:quarkus-arc'
        testImplementation 'io.quarkus:quarkus-junit5'
        testImplementation 'io.rest-assured:rest-assured'
    }

}

